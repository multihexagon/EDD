from Exception import Index


class Node:
  def __init__(self, value):

    self.value = value
    self.next = None

class DNode:
  def __init__(self, value= None):

    self.value = value
    self.next = None
    self.prev = None

class LinkedList:
  def __init__(self):
    self.head = None
  def add_at_head(self, value):
    node = Node(value)
    if(self.head is None):
      self.head = node
    else:
      node.next = self.head
      self.head = node #definí mi nueva cabeza

  def traverse(self):
    current_node = self.head
    while(current_node is not None):
      print(current_node.value)
      current_node = current_node.next

  def rec_traverse(self, current_node):
    if(current_node is not None):
      print(current_node.value)
      self.rec_traverse(current_node.next)

  def get_size(self):
    current_node = self.head
    size = 0
    while(current_node is not None):
        current_node = current_node.next
        size += 1
    return size

  def delete_at_pos(self, pos):
    current_node = self.head
    if(self.get_size()==0):
      return "Lista vacía..."
    if(pos==0):
      next_dir = self.head
      self.head = self.head.next
      next_dir.next = None
    if(0 < pos < self.get_size()):
      for i in range(0, pos-1):
        current_node = current_node.next
      next_dir = current_node.next
      current_node.next = current_node.next.next
      next_dir.next = None

class LinkedListCircular:
  def __init__(self):
    self.head = None

  def add_at_head(self, value):
    node = Node(value)
    if(self.head is None):
      self.head = node
      self.head.next = self.head
    else:
      node.next = self.head
      siguiente = node.next
      self.head = node
      siguiente.next= self.head


  def traverse(self):
    inicio = self.head
    current_node = inicio
    while(current_node.next is not inicio):
      print(current_node.value)
      current_node = current_node.next

  def rec_traverse(self, current_node):
    if(current_node is not None):
      print(current_node.value)
      self.rec_traverse(current_node.next)

  def get_size(self):
    current_node = self.head
    size = 0
    while(current_node is not None):
        current_node = current_node.next
        size += 1
    return size

  def delete_at_pos(self, pos):
    current_node = self.head
    if(self.get_size()==0):
      return "Lista vacía..."
    if(pos==0):
      next_dir = self.head
      self.head = self.head.next
      next_dir.next = None
    if(0 < pos < self.get_size()):
      for i in range(0, pos-1):
        current_node = current_node.next
      next_dir = current_node.next
      current_node.next = current_node.next.next
      next_dir.next = None

class LinkedList:
  def __init__(self):
    self.head = None
  def add_at_head(self, value):
    node = Node(value)
    if(self.head is None):
      self.head = node
    else:
      node.next = self.head
      self.head = node #definí mi nueva cabeza

  def traverse(self):
    current_node = self.head
    while(current_node is not None):
      print(current_node.value)
      current_node = current_node.next

  def rec_traverse(self, current_node):
    if(current_node is not None):
      print(current_node.value)
      self.rec_traverse(current_node.next)

  def get_size(self):
    current_node = self.head
    size = 0
    while(current_node is not None):
        current_node = current_node.next
        size += 1
    return size

  def delete_at_pos(self, pos):
    current_node = self.head
    if(self.get_size()==0):
      return "Lista vacía..."
    if(pos==0):
      next_dir = self.head
      self.head = self.head.next
      next_dir.next = None
    if(0 < pos < self.get_size()):
      for i in range(0, pos-1):
        current_node = current_node.next
      next_dir = current_node.next
      current_node.next = current_node.next.next
      next_dir.next = None

class DoubleLinkedList:
  def __init__(self):
    self.size = 0
    self.cont = 0
    self.header = DNode()
    self.trailer = DNode()
    self.header.next = self.trailer
    self.trailer.prev = self.header
    

  def insert(self, value,pos):
    node = DNode(value)

    if self.size == 0 :
        node.prev = self.header
        self.header.next = node
        node.next = self.trailer
        self.size += 1
    if pos >= self.size:
        raise IndexError("list index out of range")
    else:
        inicio = self.header.next
        current_node = inicio
        while(self.cont < pos-1):
            self.cont +=1 
            current_node = current_node.next
        

  def traverse(self):
    inicio = self.header
    current_node = inicio
    while(current_node.next != self.trailer):
      print(current_node.value)
      current_node = current_node.next

  def rec_traverse(self, current_node):
    if(current_node is not None):
      print(current_node.value)
      self.rec_traverse(current_node.next)

  def get_size(self):
    current_node = self.header
    size = 0
    while(current_node is not None):
        current_node = current_node.next
        size += 1
    return size

  def delete_at_pos(self, pos):
    current_node = self.head
    if(self.get_size()==0):
      return "Lista vacía..."
    if(pos==0):
      next_dir = self.head
      self.head = self.head.next
      next_dir.next = None
    if(0 < pos < self.get_size()):
      for i in range(0, pos-1):
        current_node = current_node.next
      next_dir = current_node.next
      current_node.next = current_node.next.next
      next_dir.next = None


# ll = LinkedList()
# ll.add_at_head("hola")
# ll.add_at_head("mundo")
# ll.add_at_head(1)
# ll.add_at_head(2)
# ll.add_at_head(3)
# ll.get_size()

n1 = Node(5)
n2 = Node(6)
n3 = Node(7)
n4 = Node(8)
n1.next = n2
n2.next = n3
n3.next = n4
n4.next = None

def is_circular(head):
    inicio = head
    current_node = inicio
    while( current_node.next is not inicio):
        current_node.next = current_node.next.next
        if current_node.next == None:
            return False
    return True

is_circular(n1)

circular = LinkedListCircular()

circular.add_at_head(5)
circular.add_at_head(6)
circular.add_at_head(7)
circular.add_at_head(8)
circular.add_at_head(9)
circular.add_at_head(10)
circular.add_at_head(11)

circular.traverse()

#print(circular.head.next.next.value)
