class Queue:
  def __init__(self):
    self.queue = []

  def print_queue(self):
    print(self.queue)
  def enqueue(self, e):
    #agregar un elemento e a la cola
    self.queue.append(e)

  def dequeue(self):
    #remueve y retorna el primer elemento
    if(self.is_empty()):
      raise Exception("Cola vacía...")
    return self.queue.pop(0)

  def first(self):
    #retornar el primer elemento de la cola
    if(self.is_empty()):
      raise Exception("Cola vacía...")
    return self.queue[0]

  def is_empty(self):
    return len(self.queue)==0

  def __len__(self): #dunder method
    #retorna tamaño
    return len(self.queue)


class Stack:
  def __init__(self):
    self.stack = []

  def push(self, e):
    #agregar un elemento e a la pila
    self.stack.append(e)

  def pop(self):
    #remueve y retorna el último elemento
    if(self.is_empty()):
      raise Exception("Pila vacía...")
    return self.stack.pop()
  
  def print_stack(self):
    print(self.stack)
  def top(self):
    #retornar el último el último elemento de la pila
    if(self.is_empty()):
      raise Exception("Pila vacía...")
    return self.stack[-1]
  def is_empty(self):
    return len(self.stack)==0
  def __len__(self): #dunder method
    #retorna tamaño
    return len(self.stack)


s = Stack()
q = Queue()

q.queue = [1,2,3,4]
s.stack = []

def invertir_cola(cola,pila):
    for  i in range(len(cola.queue)):
        aux = q.dequeue()
        pila.push(aux)

    for i in range(len(pila.stack)):
        aux= pila.pop()
        cola.enqueue(aux)
    
    return cola.queue
    
invertir_cola(q,s)
